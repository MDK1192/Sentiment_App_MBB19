View(diff_mins_df)
View(diff_mins_df)
View(diff_mins_df)
diff_mins_df <- as.data.frame(table(droplevels(as.data.frame(cut(diff_mins, breaks = seq(0, 360, by = 5))))))
View(diff_mins_df)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(diff_mins_df)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(emotion_text)
View(sentiment_text)
polratiy <- mean(sentiment_text$SentimentGI)
polarity <- mean(sentiment_text$SentimentGI)
View(sentiment_text)
summary(sentiment_text)
polarity <- mean(sentiment_text$SentimentGI, na.rm=T)
hist(sentiment_text$SentimentGI)
ggplot(data=sentiment_text, aes(sentiment_text$SentimentGI)) +
geom_histogram()
ggplot(data=sentiment_text, aes(sentiment_text$SentimentGI)) +
geom_histogram() +
geom_vline(polarity, "red")
labs(title = "Overview over Polarity distribution of Tweets", x = "Polarity Score")
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
ggplot(wordcounts, aes(x=reorder(v_cast, Freq), y=Freq)) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Wordcounts")
View(wordcounts)
ggplot(wordcounts, aes(x=reorder(wordcount_vec, Freq), y=Freq)) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Wordcounts")
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(wordcounts)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
ggplot(wordcounts, aes(x=reorder(wordcount_vec, as.numeric(Freq)), y=as.numeric(Freq))) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Wordcounts", y= "Frequency")
View(wordcounts)
wordcounts <- wordcounts[-1,]
ggplot(wordcounts, aes(x=reorder(wordcount_vec, as.numeric(Freq)), y=as.numeric(Freq))) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Wordcounts", y= "Frequency")
runApp('SemiStruk_MBB19')
View(wordcounts)
ggplot(wordcounts, aes(x=reorder(wordcount_vec, as.numeric(Freq)), y=as.numeric(Freq))) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Wordcounts", y= "Frequency")
wordcounts <- wordcounts[-1,]
ggplot(wordcounts, aes(x=reorder(wordcount_vec, as.numeric(Freq)), y=as.numeric(Freq))) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Wordcounts", y= "Frequency")
wordcount_vec <- strsplit(wordcount_vec, " ")
wordcounts <- data.frame(table(wordcount_vec))
wordcounts <- wordcounts[wordcounts$Freq > 5,]
runApp('SemiStruk_MBB19')
wordcounts[-wordcounts$wordcount_vec == "",]
wordcounts[wordcounts$wordcount_vec != "",]
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(wordcounts)
ggplot(wordcounts, aes(x=reorder(wordcount_vec, as.numeric(Freq)), y=as.numeric(Freq))) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Wordcounts", y= "Frequency")
View(wordcounts)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
ggplot(data=sentiment_text, aes(sentiment_text$SentimentGI)) +
geom_histogram() +
geom_vline(polarity, "red")
ggplot(data=sentiment_text, aes(sentiment_text$SentimentGI)) +
geom_histogram()
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
ggplot(data=sentiment_text, aes(x= SentimentGI)) +
geom_histogram()
ggplot(data=sentiment_text, aes(SentimentGI)) +
geom_histogram()
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(emotion_text)
d <- emotion_text
d
d <- emotion_text[,c(1:7)]
d
d <- emotion_text[,c(1:8)]
d <- d
d
emotion_consolidated <- emotion_text[,c(1:8)]
sum(!is.na(emotion_consolidated$anger))
emotion_consolidated[emotion_consolidated == ""] <- NA
emotion_consolidated
emotion_consolidated[emotion_consolidated == " "] <- NA
emotion_consolidated
is.na(emotion_consolidated)
View(emotion_consolidated)
emotion_consolidated[emotion_consolidated == character()] <- NA
emotion_consolidated[emotion_consolidated == character()] <- NA
View(emotion_consolidated)
emotion_consolidated[emotion_consolidated == character(0)] <- NA
emotion_consolidated <- na_if(emotion_consolidated, character(0))
View(emotion_consolidated)
View(emotion_consolidated)
emotion_consolidated <- na_if(emotion_consolidated, "character(0)")
View(emotion_consolidated)
sum(!is.na(emotion_consolidated))
sum(!is.na(emotion_consolidated$anger))
names(emotion_consolidated)
emotions_consolidated <- data.frame("anger"=sum(!is.na(emotions$anger)),
"anticipation"=sum(!is.na(emotions$anticipation)),
"disgust"=sum(!is.na(emotions$disgust)),
"fear"=sum(!is.na(emotions$fear)),
"joy"=sum(!is.na(emotions$joy)),
"sadness"=sum(!is.na(emotions$sadness)),
"surprise"=sum(!is.na(emotions$surprise)),
"trust"=sum(!is.na(emotions$trust)))
emotions<- na_if(emotion_text[,c(1:8)], "character(0)")
emotions_consolidated <- data.frame("anger"=sum(!is.na(emotions$anger)),
"anticipation"=sum(!is.na(emotions$anticipation)),
"disgust"=sum(!is.na(emotions$disgust)),
"fear"=sum(!is.na(emotions$fear)),
"joy"=sum(!is.na(emotions$joy)),
"sadness"=sum(!is.na(emotions$sadness)),
"surprise"=sum(!is.na(emotions$surprise)),
"trust"=sum(!is.na(emotions$trust)))
View(emotions_consolidated)
table(emotions)
table(is.na(emotions))
t(emotions_consolidated)
emotions_consolidated <- t(data.frame("anger"=sum(!is.na(emotions$anger)),
"anticipation"=sum(!is.na(emotions$anticipation)),
"disgust"=sum(!is.na(emotions$disgust)),
"fear"=sum(!is.na(emotions$fear)),
"joy"=sum(!is.na(emotions$joy)),
"sadness"=sum(!is.na(emotions$sadness)),
"surprise"=sum(!is.na(emotions$surprise)),
"trust"=sum(!is.na(emotions$trust))))
View(emotions_consolidated)
row.names(emotions_consolidated)
names(emotions_consolidated)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
ggplot(emotions_consolidated, aes(x=reorder(row.names(emotions_consolidated), as.numeric(V1)), y=as.numeric(V1))) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Emotions", x= "Emotion",  y= "Frequency")
emotions_consolidated <- as.data.frame(t(data.frame("anger"=sum(!is.na(emotions$anger)),
"anticipation"=sum(!is.na(emotions$anticipation)),
"disgust"=sum(!is.na(emotions$disgust)),
"fear"=sum(!is.na(emotions$fear)),
"joy"=sum(!is.na(emotions$joy)),
"sadness"=sum(!is.na(emotions$sadness)),
"surprise"=sum(!is.na(emotions$surprise)),
"trust"=sum(!is.na(emotions$trust)))))
View(emotions_consolidated)
ggplot(emotions_consolidated, aes(x=reorder(row.names(emotions_consolidated), as.numeric(V1)), y=as.numeric(V1))) +
geom_bar(stat="identity") +
coord_flip() +
labs(title = "Overview over Emotions", x= "Emotion",  y= "Frequency")
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(emotions_consolidated)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
str(d)
d$Tweet <- data_twitter$text
View(d)
d <- arrange(d, SentimentGI)
View(d)
d <- arrange(d, desc(SentimentGI))
View(d)
d$X <- c(1:nrow(d))
pol_detail  <- sentiment_text
runApp('SemiStruk_MBB19')
pol_detail %>%
plot_ly(x = ~X, y = ~SentimentGI, color = ~SentimentGI, text= ~paste("Tweet:", Tweet)) %>%
add_markers() %>%
layout(title = "Scatterplot of popularity vs budget")
pol_detail$X <- c(1:nrow(pol_detail))
pol_detail %>%
plot_ly(x = ~X, y = ~SentimentGI, color = ~SentimentGI, text= ~paste("Tweet:", Tweet)) %>%
add_markers() %>%
layout(title = "Scatterplot of popularity vs budget")
View(pol_detail)
pol_detail$Tweet <- data_twitter$text
pol_detail %>%
plot_ly(x = ~X, y = ~SentimentGI, color = ~SentimentGI, text= ~paste("Tweet:", Tweet)) %>%
add_markers() %>%
layout(title = "Scatterplot of popularity vs budget")
View(pol_detail)
plot_ly(pol_detail,x = ~X, y = ~SentimentGI, color = ~SentimentGI, text= ~paste("Tweet:", Tweet)) %>%
add_markers() %>%
layout(title = "Scatterplot of polarity of Tweets")
runApp('SemiStruk_MBB19')
pol_detail$Tweet <- data_twitter$text
pol_detail <- arrange(pol_detail, desc(SentimentGI))
pol_detail$X <- c(1:nrow(pol_detail))
plot_ly(pol_detail,x = ~X, y = ~SentimentGI, color = ~SentimentGI, text= ~paste("Tweet:", Tweet)) %>%
add_markers() %>%
layout(title = "Scatterplot of polarity of Tweets")
c
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(pol_detail)
View(pol_detail)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
ggplot(pol_detail, aes(x = X, y = SentimentGI, color = SentimentGI)) +
geom_point() +
labs(title = "Scatterplot of polarity of Tweets")
pol_detail  <<- sentiment_text
pol_detail$Tweet <- data_twitter$text
pol_detail <- arrange(pol_detail, desc(SentimentGI))
pol_detail$X <- c(1:nrow(pol_detail))
ggplot(pol_detail, aes(x = X, y = SentimentGI, color = SentimentGI)) +
geom_point() +
labs(title = "Scatterplot of polarity of Tweets")
p <- ggplot(pol_detail, aes(x = X, y = SentimentGI, color = SentimentGI)) +
geom_point() +
labs(title = "Scatterplot of polarity of Tweets")
ggplotly(p)
p <- ggplot(pol_detail, aes(x = X, y = SentimentGI, color = SentimentGI, text= Tweet)) +
geom_point() +
labs(title = "Scatterplot of polarity of Tweets")
ggplotly(p)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
pol_detail  <- sentiment_text
pol_detail$Tweet <- data_twitter$text
pol_detail <- arrange(pol_detail, desc(SentimentGI))
pol_detail$X <- c(1:nrow(pol_detail))
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
pol_detail  <- sentiment_text
pol_detail$Tweet <- data_twitter$text
pol_detail <- arrange(pol_detail, desc(SentimentGI))
pol_detail$X <- c(1:nrow(pol_detail))
p <- ggplot(pol_detail, aes(x = X, y = SentimentGI, color = SentimentGI, text= Tweet)) +
geom_point() +
labs(title = "Scatterplot of polarity of Tweets")
ggplotly(p)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(pol_detail)
str(pol_detail)
p <- ggplotly(ggplot(pol_detail, aes(x = X, y = SentimentGI, color = SentimentGI, text= Tweet)) +
geom_point() +
labs(title = "Scatterplot of polarity of Tweets"))
p
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
plot_ly(pol_detail, x = ~X, y = ~SentimentGI, color = ~SentimentGI, text= ~Tweet) %>% add_markers()
runApp('SemiStruk_MBB19')
View(pol_detail)
ggplotly(plot_ly(pol_detail, x = ~X, y = ~SentimentGI, color = ~SentimentGI, text= ~Tweet) %>% add_markers())
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
plot_ly(x = 1:10, y = 1:10)
library(plotly)
library("plotly")
install.packages("plotly")
d
1+1
plot_ly(x = 1:10, y = 1:10)
library(plotly)
plot_ly(x = 1:10, y = 1:10)
install.packages("shiny")
library(plotly)
plot_ly(x = 1:10, y = 1:10)
set.seed(1)
plot_ly(x = 1:10, y = 1:10)
ggplot(x = 1:10, y = 1:10) + geom_point()
library(ggplot2)
ggplot(x = 1:10, y = 1:10) + geom_point()
ggplot(aes(x = 1:10, y = 1:10)) + geom_point()
ggplot(aes(x = c(1:10), y = c(1:10))) + geom_point()
ggplot(aes(x = c(1:10), y = c(1:10))) + geom_point()
install.packages(c("dplyr", "DT", "ggplot2", "lubridate", "plotly", "readxl", "SentimentAnalysis", "sentimentr", "shiny", "shinydashboard", "tidytext", "tm", "twitteR", "wordcloud"))
library(plotly)
plot_ly(x = 1:10, y = 1:10)
#visualize data
# ggplotly(ggplot(pol_detail, aes(x = X, y = SentimentGI, color = SentimentGI, text= Tweet)) +
#   geom_point() +
#   labs(title = "Scatterplot of polarity of Tweets"))
# #
#plot_ly(pol_detail, x = ~X, y = ~SentimentGI, color = ~SentimentGI, text= ~Tweet) %>% add_markers()
#ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point()
plotly::plot_ly(iris, x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species, type='scatter', mode = 'markers')
shiny::runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
shiny::runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
install.packages("wordcloud2")
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(wordcounts)
wordcounts <- wordcounts[wordcounts$Freq > 15,]
names(wordcounts) <- c("wrod", "freq")
View(wordcounts)
install.packages("rtweet")
library(rtweet)
rt <- search_tweets(
"#rstats", n = 18000, include_rts = FALSE
)
rt <- search_tweets(
"#rstats", n = 18000, include_rts = FALSE
)
rt <- search_tweets(
"#rstats", n = 18000, include_rts = FALSE
)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
create_token(consumer_key = API_KEY,
consumer_secret = API_KEY_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_TOKEN_SECRET)
rt <- search_tweets(
"#rstats", n = 18000, include_rts = FALSE
)
View(rt)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(rt3)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(data)
View(data)
View(data)
data_demo <- data.frame("Date" = as.character(data$created_at),"Text" = as.character(data$text))
View(data_demo)
d <- search_tweets("data", n = 100, include_rts = FALSE)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
shiny::runApp('SemiStruk_MBB19')
library(shiny)
library(twitteR)
library(shinydashboard)
library(DT)
library(sentimentr)
library(SentimentAnalysis)
library(dplyr)
library(plotly)
library(tm)
library(lubridate)
library(readxl)
library(tidytext)
library(wordcloud2)
library(lubridate)
library(ggplot2)
library(rtweet)
library(qdap)
install.packages("qdap")
library(qdap)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
d <<- rm_stopwords(ass)
Encoding(ass) <- "UTF-8"
d <<- rm_stopwords(ass)
for(i in 1:nrow(tweets_data)){
Encoding(ass[i]) <- "UTF-8"
}
for(i in 1:nrow(tweets_data)){
Encoding(ass[i]) <- "UTF-8"
}
for(i in 1:1000){
Encoding(ass[i]) <- "UTF-8"
}
d <<- rm_stopwords(ass)
for(i in 1:1000){
d[i] <- rm_stopwords(ass[i])
}
shiny::runApp('SemiStruk_MBB19')
tweets_data[tweets_data$Text== "this tweet conflicts with utf8 and will be deleted"]
tweets_data[tweets_data$Text== "this tweet conflicts with utf8 and will be deleted",]
View(tweets_data)
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
fig
c
Q
runApp('SemiStruk_MBB19')
shiny::runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
View(data_nev)
View(data_pos)
data_twitter
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp()
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
shiny::runApp('SemiStruk_MBB19')
View(d)
View(d)
View(d)
View(data_twitter)
runApp('SemiStruk_MBB19')
shiny::runApp('SemiStruk_MBB19')
emotion_dt
lexicon::hash_nrc_emotions
runApp('SemiStruk_MBB19')
defaultSentimentRules()
defaultSentimentRules()
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
runApp('SemiStruk_MBB19')
shiny::runApp('SemiStruk_MBB19')
lexicon::hash_nrc_emotions
runApp('SemiStruk_MBB19')
