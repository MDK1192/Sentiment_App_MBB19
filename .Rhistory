#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
data <- arrange(attributes(sentiment_text)$elements, element_id)
data <- data[data$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Emotions_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Emotions_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(data$element_id))){
testdata <- data[data$element_id == i,]
browser()
}
}
}
get_sentiment_sample_data()
View(testdata)
table(testdata)
table(testdata$emotion_type)
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
data <- arrange(attributes(sentiment_text)$elements, element_id)
data <- data[data$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Emotions_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Emotions_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(data$element_id))){
tempdata <- data[data$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
browser()
}
}
}
get_sentiment_sample_data()
max(tempdata)
top_n(tempdata,1)
top_n(emotionscount)
emotionscount
str(emotionscount)
emotionscount
top(emotionscount)
max(emotionscount)
name(max(emotionscount))
column(max(emotionscount))
max(emotionscount)
which.max(emotionscount)
name(which.max(emotionscount))
names(which.max(emotionscount))
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
data <- arrange(attributes(sentiment_text)$elements, element_id)
data <- data[data$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Emotions_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Emotions_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(data$element_id))){
tempdata <- data[data$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Emotions_predicted[i] <- names(which.max(emotionscount))
}
}
browser()
}
get_sentiment_sample_data()
View(emotions_result_vec)
View(data)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
data <- na_if(data[,c(1:8)], "character(0)")
sentiment <- arrange(attributes(sentiment_text)$elements, element_id)
sentiment <- sentiment[sentiment$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Emotions_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Emotions_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(sentiment$element_id))){
tempdata <- data[sentiment$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Emotions_predicted[i] <- names(which.max(emotionscount))
}
}
browser()
}
get_sentiment_sample_data()
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
data <- arrange(attributes(sentiment_text)$elements, element_id)
data <- data[data$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Emotions_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Emotions_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(data$element_id))){
tempdata <- data[data$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Emotions_predicted[i] <- names(which.max(emotionscount))
}
}
browser()
}
get_sentiment_sample_data()
View(emotions_result_vec)
View(sentiment_text)
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
sentiment <- arrange(attributes(sentiment_text)$elements, element_id)
sentiment <- sentiment[sentiment$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Emotions_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Emotions_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(sentiment$element_id))){
tempdata <- sentiment[sentiment$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Emotions_predicted[i] <- names(which.max(emotionscount))
}
}
browser()
}
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
sentiment <- arrange(attributes(sentiment_text)$elements, element_id)
sentiment <- sentiment[sentiment$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Emotions_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Emotions_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(sentiment$element_id))){
tempdata <- sentiment[sentiment$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Emotions_predicted[i] <- names(which.max(emotionscount))
}
}
browser()
}
get_sentiment_sample_data()
View(data)
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
sentiment <- arrange(attributes(sentiment_text)$elements, element_id)
sentiment <- sentiment[sentiment$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Sentiment_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Sentiment_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(sentiment$element_id))){
tempdata <- sentiment[sentiment$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Sentiment_predicted[i] <- names(which.max(emotionscount))
}
}
browser()
data <- cbind(data, Sentiment_predicted)
}
get_sentiment_sample_data()
View(data)
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
sentiment <- arrange(attributes(sentiment_text)$elements, element_id)
sentiment <- sentiment[sentiment$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Sentiment_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Sentiment_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(sentiment$element_id))){
tempdata <- sentiment[sentiment$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Sentiment_predicted[i] <- names(which.max(emotionscount))
}
}
data <- cbind(data, Sentiment_predicted)
browser()
}
View(data)
get_sentiment_sample_data()
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
sentiment <- arrange(attributes(sentiment_text)$elements, element_id)
sentiment <- sentiment[sentiment$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Sentiment_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Sentiment_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(sentiment$element_id))){
tempdata <- sentiment[sentiment$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Sentiment_predicted[i] <- names(which.max(emotionscount))
}
}
data <- cbind(data, emotions_result_vec)
browser()
}
get_sentiment_sample_data()
View(data)
unique(data$Sentiment_real)
unique(data$Sentiment_predicted)
data$Sentiment_predicted["joy"]
data$Sentiment_predicted== "joy"
data$Sentiment[data$Sentiment_predicted== "joy"] <- "happy"
View(data)
data$Sentiment_predicted[data$Sentiment_predicted== "joy"] <- "happy"
View(data)
unique(data$Sentiment_predicted)
unique(data$Sentiment_real)
get_sentiment_sample_data <- function(){
data <- read.csv("SemiStruk_MBB19/Dataset4.csv")
#Take care of non-UTF-8 Characters, replace them with ''
iconv(data, "UTF-8", "UTF-8",sub='')
data$Text <- as.character(data$Tweets)
#iterate over textdata; remove twitterlike textelements ('@User123....'); transform text into UTF-8
for(i in 1:nrow(data)){
data$Text[i] <- gsub("@\\w+ *", "", data$Text[i])
Encoding(data$Text[i]) <- "UTF-8"
}
#Normalize data (remove Punctuation, Numbers, Capitalization, "/()_-")
data <- data.frame("Text" = as.character(removePunctuation(removeNumbers(tolower(data$Text)))), "Sentiment_real"= data$Feeling)
data$Text <- as.character(data$Text)
for(i in 1:nrow(data)){
#remove https/http addresses from tweets
data$Text[i] <- gsub("http\\w+ *", "", data$Text[i])
data$Text[i] <- gsub("https\\w+ *", "", data$Text[i])
#remove non-ASCII characters
data$Text[i] <- gsub("[^\x01-\x7F]", "", data$Text[i])
#remove stopwords
# data$Text[i] <- tryCatch({rm_stopwords(data$Text[i],unlist = FALSE , separate = FALSE)},
#                                 error=function(cond){
#                                   Text <- "this tweet conflicts with utf8 and will be deleted"
#                                   return(Text)})
}
sentiment_text <- extract_emotion_terms(data$Text, un.as.negation = T)
#data <- cbind(data, sentiment_text[,c(3,5,6,7,8,9)])
#data <- na_if(data[,c(1:8)], "character(0)")
sentiment <- arrange(attributes(sentiment_text)$elements, element_id)
sentiment <- sentiment[sentiment$emotion_type %in% c("anger", "disgust", "fear","joy", "sadness", "surprise"),]
emotions_result_vec <- data.frame("Sentiment_predicted" = c(1:nrow(sentiment_text)))
emotions_result_vec$Sentiment_predicted <- NA
for(i in 1:nrow(sentiment_text)){
if(i %in% as.numeric(unique(sentiment$element_id))){
tempdata <- sentiment[sentiment$element_id == i,]
emotionscount <- table(tempdata$emotion_type)
emotions_result_vec$Sentiment_predicted[i] <- names(which.max(emotionscount))
}
}
data <- cbind(data, emotions_result_vec)
data$Sentiment_predicted[data$Sentiment_predicted== "joy"] <- "happy"
data$Sentiment_predicted[data$Sentiment_predicted== "sadness"] <- "sad"
data$Sentiment_predicted[data$Sentiment_predicted== "anger"] <- "angry"
browser()
}
get_sentiment_sample_data()
table(data$Sentiment_real, data$Sentiment_predicted)
ptable(data$Sentiment_real, data$Sentiment_predicted)
proptable(data$Sentiment_real, data$Sentiment_predicted)
prop.table(data$Sentiment_real, data$Sentiment_predicted)
prop.table(table(data$Sentiment_real, data$Sentiment_predicted))
round(prop.table(table(data$Sentiment_real, data$Sentiment_predicted)), 2)
round(prop.table(table(data$Sentiment_real, data$Sentiment_predicted)), 4)
round(prop.table(table(data$Sentiment_real, data$Sentiment_predicted[data$Sentiment_predicted== "angry"])), 4)
round(prop.table(table(data$Sentiment_real[data$Sentiment_predicted== "angry"], data$Sentiment_predicted[data$Sentiment_predicted== "angry"])), 4)
round(prop.table(table(data$Sentiment_real[data$Sentiment_predicted== "disgust"], data$Sentiment_predicted[data$Sentiment_predicted== "disgust"])), 4)
round(prop.table(table(data$Sentiment_real[data$Sentiment_predicted== "fear"], data$Sentiment_predicted[data$Sentiment_predicted== "fear"])), 4)
round(prop.table(table(data$Sentiment_real[data$Sentiment_predicted== "happy"], data$Sentiment_predicted[data$Sentiment_predicted== "happy"])), 4)
round(prop.table(table(data$Sentiment_real[data$Sentiment_predicted== "sad"], data$Sentiment_predicted[data$Sentiment_predicted== "sad"])), 4)
round(prop.table(table(data$Sentiment_real[data$Sentiment_predicted== "surprise"], data$Sentiment_predicted[data$Sentiment_predicted== "surprise"])), 4)
data <- readxl::read_xlsx("SemiStruk_MBB19/Sentiment_result.xlsx")
View(data)
data <- readxl::read_xlsx("SemiStruk_MBB19/Sentiment_result.xlsx")
View(data)
data <- readxl::read_xlsx("SemiStruk_MBB19/Sentiment_result.xlsx", row.names=T)
View(data)
data$...1 <- names(data)
View(data)
data$Emotions <- names(data)
View(data)
data$Emotions <- data$...1
data <- data[,c(8,2,3,4,5,6,7)]
